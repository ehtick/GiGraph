using System.Collections.Generic;

namespace GiGraph.Dot.Types.EscapeString;

/// <summary>
///     Facilitates building text with escape sequences that format its lines or hold a place for identifiers filled in on graph
///     visualization. The output generated by the <see cref="Build" /> method may be assigned to a label attribute of an element or
///     to any <see cref="DotEscapeString" /> type attributes.
/// </summary>
public class DotFormattedTextBuilder
{
    protected readonly List<DotEscapeString> _items = new();

    /// <summary>
    ///     Creates a new instance.
    /// </summary>
    public DotFormattedTextBuilder()
    {
    }

    /// <summary>
    ///     Creates a new instance initialized with text.
    /// </summary>
    /// <param name="text">
    ///     The text to initialize the instance with.
    /// </param>
    public DotFormattedTextBuilder(DotEscapeString text)
    {
        _items.Add(text);
    }

    /// <summary>
    ///     Gets the number of items in this builder.
    /// </summary>
    public virtual int Count => _items.Count;

    /// <summary>
    ///     Appends the specified text to the instance.
    /// </summary>
    /// <param name="text">
    ///     The text to append to the instance.
    /// </param>
    public virtual DotFormattedTextBuilder Append(DotEscapeString text)
    {
        _items.Add(text);
        return this;
    }

    /// <summary>
    ///     Appends a line break to the instance.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendLine()
    {
        return Append(DotEscapeString.LineBreak);
    }

    /// <summary>
    ///     Appends the specified line of text to the instance.
    /// </summary>
    /// <param name="line">
    ///     The line of text to append to the instance.
    /// </param>
    public virtual DotFormattedTextBuilder AppendLine(DotEscapeString line)
    {
        return Append(line).AppendLine();
    }

    /// <summary>
    ///     Causes the last line of text in this instance to be left-justified. Further appended text will start from a new line.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendLeftJustificationLineBreak()
    {
        return Append(DotEscapeString.LeftJustificationLineBreak);
    }

    /// <summary>
    ///     Appends the specified line of text to the instance and left-justifies it. Note that if the text contains line breaks, the
    ///     justification will be applied to the last line only.
    /// </summary>
    /// <param name="line">
    ///     The line of text to append to the instance.
    /// </param>
    public virtual DotFormattedTextBuilder AppendLeftJustifiedLine(DotEscapeString line)
    {
        return Append(line).AppendLeftJustificationLineBreak();
    }

    /// <summary>
    ///     Causes the last line of text in this instance to be right-justified. Further appended text will start from a new line.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendRightJustificationLineBreak()
    {
        return Append(DotEscapeString.RightJustificationLineBreak);
    }

    /// <summary>
    ///     Appends the specified line of text to the instance and right-justifies it. Note that if the text contains line breaks, the
    ///     justification will be applied to the last line only.
    /// </summary>
    /// <param name="line">
    ///     The line of text to append to the instance.
    /// </param>
    public virtual DotFormattedTextBuilder AppendRightJustifiedLine(DotEscapeString line)
    {
        return Append(line).AppendRightJustificationLineBreak();
    }

    /// <summary>
    ///     Appends a placeholder replaced with the label of the current object when the graph is visualized.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendLabelPlaceholder()
    {
        return Append(DotEscapeString.LabelPlaceholder);
    }

    /// <summary>
    ///     Appends a placeholder replaced with the identifier of the graph when the graph is visualized.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendGraphIdPlaceholder()
    {
        return Append(DotEscapeString.GraphIdPlaceholder);
    }

    /// <summary>
    ///     Appends a placeholder replaced with the definition of the current edge when the graph is visualized. Applicable to edges
    ///     only.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendEdgeDefinitionPlaceholder()
    {
        return Append(DotEscapeString.EdgeDefinitionPlaceholder);
    }

    /// <summary>
    ///     Appends a placeholder replaced with the identifier of the tail node of the current edge when the graph is visualized.
    ///     Applicable to edges only.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendTailNodeIdPlaceholder()
    {
        return Append(DotEscapeString.TailNodeIdPlaceholder);
    }

    /// <summary>
    ///     Appends a placeholder replaced with the identifier of the head node of the current edge when the graph is visualized.
    ///     Applicable to edges only.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendHeadNodeIdPlaceholder()
    {
        return Append(DotEscapeString.HeadNodeIdPlaceholder);
    }

    /// <summary>
    ///     Appends a placeholder replaced with the identifier of the current node when the graph is visualized. Applicable to nodes
    ///     only.
    /// </summary>
    public virtual DotFormattedTextBuilder AppendNodeIdPlaceholder()
    {
        return Append(DotEscapeString.NodeIdPlaceholder);
    }

    /// <summary>
    ///     Returns content as a concatenated string.
    /// </summary>
    public override string ToString()
    {
        return Build().ToString();
    }

    /// <summary>
    ///     Returns content as formatted text that can be used as a label of an element.
    /// </summary>
    public virtual DotEscapeString Build()
    {
        return new DotConcatenatedEscapeString(_items.ToArray());
    }
}